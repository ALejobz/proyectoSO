!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALGORITHM_H_	algorithm.h	5;"	d
Algorithm	algorithm.h	/^class Algorithm {$/;"	c
FCFS	FCFS.cpp	/^FCFS::FCFS(Process in_prcs[], int in_n) {$/;"	f	class:FCFS
FCFS	FCFS.h	/^class FCFS : public Algorithm{$/;"	c
FCFS_H_	FCFS.h	7;"	d
GANTT_H_	gantt.h	5;"	d
Gantt	gantt.h	/^class Gantt {$/;"	c
PRIORITY	PRIORITY_NONP.cpp	/^PRIORITY::PRIORITY(Process in_prcs[], int in_n) {$/;"	f	class:PRIORITY
PRIORITY	PRIORITY_NONP.h	/^class PRIORITY : public Algorithm{$/;"	c
PRIORITY_H_	PRIORITY_NONP.h	8;"	d
PROCESS_H_	process.h	2;"	d
Process	process.h	/^typedef struct process Process;$/;"	t	typeref:struct:process
QUANTUM	PRIORITY_NONP.h	9;"	d
arrival_time	process.h	/^      arrival_time,$/;"	m	struct:process
burst_time	process.h	/^      burst_time,$/;"	m	struct:process
calculateRT	FCFS.cpp	/^void FCFS::calculateRT() {$/;"	f	class:FCFS
calculateTAT	FCFS.cpp	/^void FCFS::calculateTAT() {$/;"	f	class:FCFS
calculateWT	FCFS.cpp	/^void FCFS::calculateWT() {$/;"	f	class:FCFS
compareArrival	algorithm.cpp	/^bool Algorithm::compareArrival(Process p1, Process p2) {$/;"	f	class:Algorithm
comparePID	algorithm.cpp	/^bool Algorithm::comparePID(Process p1, Process p2) {$/;"	f	class:Algorithm
compareST	algorithm.cpp	/^bool Algorithm::compareST(Process p1, Process p2) {$/;"	f	class:Algorithm
completation_time	process.h	/^      completation_time,$/;"	m	struct:process
execute	FCFS.cpp	/^void FCFS::execute() {$/;"	f	class:FCFS
execute	PRIORITY_NONP.cpp	/^void PRIORITY::execute() {$/;"	f	class:PRIORITY
main	scheduling.cpp	/^int main() {$/;"	f
n_prcs	FCFS.h	/^    int n_prcs;$/;"	m	class:FCFS
n_prcs	PRIORITY_NONP.h	/^    int n_prcs;$/;"	m	class:PRIORITY
n_prcs	gantt.h	/^    int n_prcs;$/;"	m	class:Gantt
p_id	process.h	/^  int p_id,$/;"	m	struct:process
prcs	FCFS.h	/^    Process *prcs;$/;"	m	class:FCFS
prcs	PRIORITY_NONP.h	/^    Process *prcs;$/;"	m	class:PRIORITY
printGantt	algorithm.cpp	/^void Algorithm::printGantt(Process p[], int n_prcs) {$/;"	f	class:Algorithm
priority	process.h	/^      priority;$/;"	m	struct:process
process	process.h	/^struct process {$/;"	s
response_time	process.h	/^      response_time,$/;"	m	struct:process
start_time	process.h	/^      start_time,$/;"	m	struct:process
total_response_time	algorithm.h	/^        total_response_time = 0;$/;"	m	class:Algorithm
total_turnaround_time	algorithm.h	/^    double total_turnaround_time = 0,$/;"	m	class:Algorithm
total_waiting_time	algorithm.h	/^        total_waiting_time = 0,$/;"	m	class:Algorithm
turnaround_time	process.h	/^      turnaround_time,$/;"	m	struct:process
waiting_time	process.h	/^      waiting_time,$/;"	m	struct:process
